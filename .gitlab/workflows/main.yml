workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

image: "${CI_REGISTRY_IMAGE}:${VERSION}_py39"

variables:
  VERSION: "0.0.6"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

.setup_env: &setup_env
  - pip install -q --upgrade pip wheel poetry==1.5.1 poetry-dynamic-versioning lightfm==1.17

.install_replay: &install_replay
  before_script:
    - *setup_env
    - poetry install

cache: &global_cache
  key: ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}
  paths:
    - .cache/pip
    - .cache/pypoetry
  policy: pull

stages:
  - resolve
  - code_quality
  - test
  - examples
  - build package

resolve-job:
  stage: resolve
  cache:
    <<: *global_cache
    policy: push
  script:
    - *setup_env
    - poetry --version
    - pip --version
    - poetry install
    - dependencies="${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_dependencies.txt"
    - dependencies=$(echo ${dependencies} | sed -e 's/[^0-9a-zA-Z.-]/_/g') # removed invalid characters
    - pip list > ${dependencies}
  artifacts:
    paths:
      - poetry.lock
      - ${dependencies}
    expire_in: 2 week

pylint-job:
  <<: *install_replay
  stage: code_quality
  script:
    - pylint replay

pycodestyle-job:
  <<: *install_replay
  stage: code_quality
  script:
    - pycodestyle replay tests

sphinx-job:
  <<: *install_replay
  stage: code_quality
  script:
    - make -C docs clean html

test-job:
  <<: *install_replay
  stage: test
  script:
    - pytest

examples-execute-job:
  <<: *install_replay
  stage: examples
  script:
    - export EXAMPLES_EXCLUDE=02_models_comparison.ipynb,06_item2item_recommendations.ipynb
    - cd examples
    - for i in *.ipynb; do [[ ! "$EXAMPLES_EXCLUDE" =~ "$i" ]] && jupyter nbconvert --to notebook --execute $i; done

build-production-package:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: build package
  script:
    - *setup_env
    - export PACKAGE_SUFFIX=.dev${CI_JOB_ID}
    - echo $PACKAGE_SUFFIX
    - poetry version
    - poetry config repositories.replay ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry publish --build -r replay -u gitlab-ci-token -p ${CI_JOB_TOKEN}
